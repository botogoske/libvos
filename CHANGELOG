next (2017-xx-xx)
=================

Breaking Changes
----------------

* Replace Object string representation attribute from `_v` to `__str`

  We thought that we can use `_v` so other object that descended from
  class Buffer does not have duplicate attribute.

  Turn out we are wrong. We must differentiate between "what" the object is
  and what the object content is. For example, a server have buffer `_v` to
  read and write to client. When we want to know the information about server,
  by printing it with `chars()`, it should not return or overwrite the content
  of buffer but other information, e.g. IP address and port that they bind to.

Enhancements
------------

* Buffer:
  - appendd: add parameter to set number of precision
  - PARSE_INT: new method to parse string to integer
  - VSNPRINTF: handle '.' with digit precision

* DNSQuery:
  - get_num_answer(): net method to get number of answer
  - chars(): new method to get string representation of DNSQuery in JSON
    format.

* Resolver:
  - add static method to convert DNS type from string to number

v0.3.1 (2017-02-08)
===================

Fixes
-----
* RBT:
  - Fix insertion
  - Fix deletion
  - Add parameter to constructor for custom swap-content function when
    doing insertion with replace, or through deletion.

v0.3.0 (2017-02-05)
===================

Breaking Changes
----------------

* Buffer:
  - cmp(): change parameter from Buffer* to Object*
  - add constructor to create Buffer object from pointer to char
  - add constructor to create Buffer object from pointer to Buffer
  - remove INIT, INIT_RAW, and INIT_SIZE, because its duplicate with
    constructors

* DNSQuery:
  - remove `_next` attribute
  - remove static `ADD` method

Enhancements
------------

* RBT: new module as implementation of Red-Black Tree algorithm

* Buffer:
  - add static function to compare buffer from two Objects

* Dlogger:
  - open(): add parameter to show or hide timestamp on log output
  - open(): add parameter to prefix-ing log with custom string

* List:
  - make it thread safe
  - Return BNode object after pushing an item to the list
  - add method to detach list item from the list
  - add method to push node in head and tail in sorted order.
  - add method to search list using Object with comparable function
  - add method to sort list
  - add method to swap list item by index
  - add method to get list node at specifix index
  - add unsafe method to get List item at specific index
  - add method to pop node object from head or tail

* Object:
  - add static method `CMP` to compare two objects


Fixes
-----

* Config:
  - Allow empty key value

* Dlogger:
  - _w(): check write size and repeat until all buffer has been written to
    disk

* List:
  - fix chars() when using List as pointer to another List


v0.2.0 (2016-10-04)
===================

Breaking Changes
----------------

* Buffer use Object as base class. This make the method `v()` is duplicate
  with `chars()`, hence, the `v()` is removed.

* Since we define this library as C-with-Class, all headers file now is `.hh`
  to differentiate it with C and C++.

* SockAddr, Socket, SockServer, FTP, FTPD, Resolver: change port type from
  `int` to `uint16_t`

* SockAddr: Remove _next, _last attributes, dump() and ADD() methods

  - User must use List to work with list of address now.
  - Method dump() has been replaced by chars().

* Resolver:

  - Use List to replace SockAddr as list of parent server
  - Method `dump()` has been replaced with `chars()`

* SSVReader: has been refactored to use ``Buffer::split_by_whitespace()``

  - Method `get_row()` has been removed.
  - Method `open()` and `parse()` now private, user can only `reset()` and
    `load()`

* Socket: remove `_next` and `_prev` fields

* SockServer: use List class to manage client sockets

* DNS_rr: remove `_next` field

* FTPD_user: remove `_next` field
* FTPD_client: remove `_next`, `_prev`, and `_last` fields
* FTPD_cmd: remove `_next` field
* FTPD: replace FTPD_user, FTPD_client, and FTPD_cmd with List

* RecordMD: remove `_next` and `_n_md` fields

  This change affect Reader and Writer, because we pass the meta data not
  as pointer to RecordMD anymore but as pointer List object.

* Add `DSV` prefix to Reader, Writer, Record, and RecordMD module

  Reader, Writer, Record, and RecordMD are used for reading delimited
  separated value, not to be confused with reading and writing normal file.


Enhancements
------------

* Class Object for base class in all future classes

* Implement binary node, which can be use for double linked list, queue,
  or in binary tree (BNode.hh)

* Implement circular double linked list (List.hh), thread safe.

* Buffer: add method to split buffer content by character

* Implement pthread mutex as Locker.

* Dlogger,OCI,SockServer: replace pthread mutex with Locker object

Fixes
-----

* DNSQuery: fix SOA parsing
* Remove linking to libstd++
* Compilation error on 32 bit machine and ARM
* Resolver: fix port not resetted if server list contain more than one
  addresses.
* SockServer: Increase socket listen backlog to 2048
* Buffer: VSNPRINTF, do not print empty character (0 or NULL), which caused
  the string truncated when printed to stdout.

v0.1.0 (2016-09-04)
===================

Features:

* Buffer module, very easy and simple module for processing sequence
  byte of data. In example: string or network packet.

* File module, module to talk to local file system, reading and writing
  file.

* Dir module, module to talk to local file system, listing and caching
  directory content.

* Reading and writing Delimited Separated Value (DSV) data.

* Reading and writing INI file format.

* Socket module, talk to network using UDP or TCP socket.

* FTP module, very easy and simple module to talk to FTP server.

* FTP server, module for serving file system or any hierarchy of data to
  networks using FTP.

* OCI module, Minimalist and simple module for sending a query to Oracle
  Database server and receiving query data (not fully supported).
